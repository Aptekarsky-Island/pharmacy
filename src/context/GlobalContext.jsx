import React, { createContext, useReducer, useContext, useEffect } from 'react';

// === 1. –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ===
const initialState = {
  cartItems: [],
  totalPrice: 0,
  totalCount: 0,
  totalProductsCount: 0,
  isCatalogOpen: false,
  isSearchOpen: false,
};

// === 2. –¢–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π (action types) ===
export const types = {
  ADD_TO_CART: 'ADD_TO_CART',
  REMOVE_FROM_CART: 'REMOVE_FROM_CART',
  UPDATE_QUANTITY: 'UPDATE_QUANTITY',
  CLEAR_CART: 'CLEAR_CART',
  OPEN_CATALOG: 'OPEN_CATALOG',
  CLOSE_CATALOG: 'CLOSE_CATALOG',
  OPEN_SEARCH: 'OPEN_SEARCH',
  CLOSE_SEARCH: 'CLOSE_SEARCH',
  UPDATE_METRICS: 'UPDATE_METRICS', // üëà –Ω–æ–≤—ã–π —Ç–∏–ø –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
};

// === 3. –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ cartItems ===
const getMetrics = (cartItems) => {
  const totalCount = cartItems.reduce((acc, item) => acc + item.quantity, 0);
  const totalProductsCount = cartItems.length;
  const totalPrice = cartItems.reduce((acc, item) => {
    const price = parseInt(item.price.replace(/[^\d]/g, ''), 10);
    return acc + (price * item.quantity);
  }, 0);

  return { totalCount, totalProductsCount, totalPrice };
};

// === 4. –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π (ACTION_HANDLERS) ===
const ACTION_HANDLERS = {
  [types.ADD_TO_CART]: (state, action) => {
    const product = action.payload;
    const existingItem = state.cartItems.find(item => item.id === product.id);

    let updatedCart;

    if (existingItem) {
      updatedCart = state.cartItems.map(item =>
        item.id === product.id ? { ...item, quantity: item.quantity + 1 } : item
      );
    } else {
      updatedCart = [...state.cartItems, { ...product, quantity: 1 }];
    }

    localStorage.setItem('cart', JSON.stringify(updatedCart));

    return { ...state, cartItems: updatedCart };
  },

  [types.REMOVE_FROM_CART]: (state, action) => {
    const updatedCart = state.cartItems.filter(
      item => item.id !== action.payload
    );
    localStorage.setItem('cart', JSON.stringify(updatedCart));
    return { ...state, cartItems: updatedCart };
  },

  [types.UPDATE_QUANTITY]: (state, action) => {
    const { productId, quantity } = action.payload;

    if (quantity <= 0) {
      return ACTION_HANDLERS[types.REMOVE_FROM_CART](state, {
        payload: productId,
      });
    }

    const updatedCart = state.cartItems.map(item =>
      item.id === productId ? { ...item, quantity } : item
    );

    localStorage.setItem('cart', JSON.stringify(updatedCart));

    return { ...state, cartItems: updatedCart };
  },

  [types.CLEAR_CART]: (state) => {
    localStorage.setItem('cart', JSON.stringify([]));
    return { ...state, cartItems: [] };
  },

  [types.OPEN_CATALOG]: (state) => ({ ...state, isCatalogOpen: true }),
  [types.CLOSE_CATALOG]: (state) => ({ ...state, isCatalogOpen: false }),

  [types.OPEN_SEARCH]: (state) => ({ ...state, isSearchOpen: true }),
  [types.CLOSE_SEARCH]: (state) => ({ ...state, isSearchOpen: false }),

  [types.UPDATE_METRICS]: (state, action) => ({
    ...state,
    totalCount: action.payload.totalCount,
    totalProductsCount: action.payload.totalProductsCount,
    totalPrice: action.payload.totalPrice,
  }),
};

// === 5. –†–µ–¥—å—é—Å–µ—Ä —á–µ—Ä–µ–∑ ACTION_HANDLERS ===
const globalReducer = (state, action) => {
  const handler = ACTION_HANDLERS[action.type];
  return handler ? handler(state, action) : state;
};

// === 6. –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä ===
export const GlobalContext = createContext();

export const GlobalProvider = ({ children }) => {
  // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É –∏–∑ localStorage
  const savedCart = JSON.parse(localStorage.getItem('cart')) || [];

  const [state, dispatch] = useReducer(globalReducer, {
    ...initialState,
    cartItems: savedCart,
  });

  // –§–ª–∞–≥, —á—Ç–æ–±—ã –Ω–µ –∑–∞–ø—É—Å–∫–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ
  const isInitialMount = React.useRef(true);

  // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ cartItems
  useEffect(() => {
    if (isInitialMount.current) {
      isInitialMount.current = false;
      return;
    }

    const { totalCount, totalProductsCount, totalPrice } = getMetrics(state.cartItems);

    dispatch({
      type: types.UPDATE_METRICS,
      payload: { totalCount, totalProductsCount, totalPrice },
    });
  }, [state.cartItems]);

  // –û–±—ä–µ–¥–∏–Ω—è–µ–º state –∏ –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
  const contextValue = {
    ...state,
    dispatch,
  };

  return (
    <GlobalContext.Provider value={contextValue}>
      {children}
    </GlobalContext.Provider>
  );
};

// === 7. –•—É–∫ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É ===
export const useGlobalContext = () => useContext(GlobalContext);